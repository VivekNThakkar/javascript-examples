JavaScript is synchronous and single threaded language. => It can only do one thing at a time and in a specific order. Using callbacks, we can do async things in javascript.
Node.js can be asynchronous and have non-blocking I/O

-------------------------------------------------------------------------------------------------------------------------------------
2. How JavaScript Works 🔥& Execution Context | Namaste JavaScript Ep.1
JS is synchronous single-threaded language. Single threaded => js can execute one command at a time. synchronous => js can execute code in a specific order. JS can only go to next line once the current line has been finished executing
Everything in javascript happens inside an "Execution context"

Execution context has 2 components in it => 
1. memory component (variable environment) => all variables and functions are stored as a key:value pair
2. code component (thread of Execution) => this is the place where code is executed one line at a time.


-------------------------------------------------------------------------------------------------------------------------------------
3. How JavaScript Code is executed? ❤️& Call Stack | Namaste JavaScript Ep. 2
When we run JS program, a Global Execution context is created.

Execution context is created in 2 phases => 
1. Memory Creation phase => JS allocates memory to all the variables (var) (key name => name of variable. value => undefined) AND functions (function) (key name => name of function. value => whole code of the function).
2. Code Execution phase => JS once again runs through the whole JS program line by line & it executes the code now. As soon as JS encouters var n=2, it replaces the value of n by 2 in memory (replaces undefined by 2).
Function invokation => whenever a function is invoked, a new Execution context is created (inside the Global Execution context's code Execution phase). This new Execution context again has 2 phases => memory Creation and code Execution phase . Memory allocation of variables and functions present inside the function takes place.
Once the whole function is executed, this newly created Execution context (for that instance of that function) will be deleted as soon as function returns.
Once whole JS program is finished running, the whole Global Execution context also gets deleted.

JS manages all Execution context Creation, deletion, and the control => using stack (call stack) .JS has its own call stack.
Call stack => everytime in the bottom of the stack, we have our Global Execution Context. Whenver JS program is run, this call stack is populated with this Global Execution context.
Whenever a function is invoked, a new Execution context is created, this is put inside the stack. As soon as function returns, this new execution context gets poped out of the stack and control gets back to the next element in the stack.
Again when a function is invoked, same process happens.
After whole JS program is executed, Global Execution context is also popped out of the call stack and call stack gets empty
CAll stack => is only for managing these Execution contexts.
Call stack maintains the order of Execution of Execution contexts
Call stack is also known as => Execution context stack, program stack, control stack, runtime stack, machine stack


-------------------------------------------------------------------------------------------------------------------------------------
4. Hoisting in JavaScript 🔥(variables & functions) | Namaste JavaScript Ep. 3
Even before the code in JS starts executing, the memory is allocated to each and every variable (var) and functions (function).
In case of variables, variable name get memory allocated with its value as undefined.
In case of function, function name get memory allocated with its value as the whole code of the function.
But if an arrow function/ normal function is saved in a variable, it wont be saved in memory during the memory Execution phase

not defined => variable is not present in the code. Reference error
undefined => variable is present, but no value is assigned to that variable

We can check the global Execution context on browser by putting a debugger and searching inside "sources" -> "scope"



-------------------------------------------------------------------------------------------------------------------------------------
How functions work in JS ❤️ & Variable Environment | Namaste JavaScript Ep. 4
var => functional scoped
if a variable is not found in a function, it will search for that variable outside that function (function's parent function)



-------------------------------------------------------------------------------------------------------------------------------------
SHORTEST JS Program 🔥window & this keyword | Namaste JavaScript Ep. 5
Empty file => is the shortest JS program
JS engine creates "window" and "this"
window => a object with lot of functions and variables. These are created by JS engine into the global space. We can access this anywhere in our JS program
At global level, "this" points to the "window" object .
"window" is actually a global object which is created along with the Global execution context.
Whenver any JS program is run, a global object (window, incase of browser) is created, a Global Execution Context (GEC) is created and aling with that Execution context a "this" variable is created.

JS engine in chrome is v8. Firefix, safari, internet explorer has its own engine.
All these JS engines has a responsiblity to create this global object

Global Object => incase of browser it is known as "window". incase of node it is something else. Wherever you run the JS program, it is different. But global object is always created.
Even if JS file is empty, a global object is created.

At the global level / base level / at the global Execution context,   this === window  // true
But inside any function,   this === window // false


Whenever a Execution context is created, a "this" is created along with it. Even for the functional Execution context anf global Execution context. 
And at global level, "this" points to "window" (incase of browser) object.

Any code in JS which is not inside a function is in global space
If any code is inside any function, then that code is not in global space
If we try to put any variable / function in "global space", these variables and functions gets attached to that global object (window, incase of browser). We can access that using "window" , window.variable_name or directly with the name variable_name (It assumes that youre referring to the global space).




-------------------------------------------------------------------------------------------------------------------------------------
undefined vs not defined in JS 🤔 | Namaste JavaScript Ep. 6
When JS allocates memory to all the variables and functions, to the variables it tries to put a placeholder undefined. undefined is like taking memory.
Not defined => when a variable has not been allocated memory

JS is a loosely typed language (weakly typed language) => you can assign any datatype to the same variable anytime. 




-------------------------------------------------------------------------------------------------------------------------------------
The Scope Chain, 🔥Scope & Lexical Environment | Namaste JavaScript Ep. 7
Scope in JS is directly related to Lexical environment.
Scope => it means where you can access a specific variable / function  in our code.
Child can access the variables of parent . No vice versa.  Scope is directly dependent on the lexical environment.

Lexical environment => Whenever an execution context is created, a lexical environment is also created. 
” Lexical environment is the local memory along with the lexical environment of its parent””. “Lexical” as a term means “in-hierarchy / in a sequence”. 
Example: if c() is inside a(), we can say that c() function is lexically sitting inside a() function. And a() is lexically inside the global scope. So whenever an execution context is created, we also get a "reference" (not value) to the lexical environment of its parent and that parent has a ref to the lexical env of its own parent and so on. So basically child can access variables of all his parents and their parents and so on….  In case of global execution context, the "reference" to the lexical env of its parent which is null (‘.’ Global context has no parent, since it itself is parent).
Lexical scope rules say that code in one scope can access variables of either that scope or any scope outside of it.
The way/mechanism of finding the variables (local context, if not than finding in parent and so on) is known as scope chaining.




-------------------------------------------------------------------------------------------------------------------------------------
let & const in JS 🔥Temporal Dead Zone | | Namaste JavaScript Ep. 8

‘let’ & ‘const’ declarations are hoisted in js, but they are hoisted very differently than the ‘var’ declarations. Let and const both are in the temporal deadzone for time being.
for all var, let, const cases, memory is allocated before actual code execution.  “var” variables are attached to global object, but in case of let and const they are also allocated memory  (ie. is called hoisting) but they are stored in diff memory space than global.  So you cannot access let and const before initialisation, it’ll give “reference” error (cannot access before initialisation) . You cannot access let and const which are present in diff memory case bcoz you cannot access this memory space before you have put in some value in it (and we know that value is put only when that line of code is executed).   In case of “var”, if they are accessed before initialisation, it’ll give “undefined”. 
Temporal dead zone => it is the time since when this let and const variables were hoisted , till it is initialised some value / till the let/const code is executed. The time b/w them is called temporal deadzone. And whenever we try to access variable in its temporal deadzone, it gives reference error.
Also let and const variables won’t be attached to “window/this” object, bcoz they are being maintained in a separate memory space (reserved space for let and const).
const is same as let, but it is more strict then “let”.  You cannot just declare const without any value. You need to assign value to const during initialisation and cannot be changed after that OR ELSE it’ll give error even before a single line of code is executed.

If we try to access let variable before initialisation, it'll give error => " cannot access before initialisation " and not " not defined "

We cannot declare 2 same let variables / 2 same const variables in same scope (it’ll give error even before executing a single line of code => SyntaxError: No duplicate declaration). But this is not the case in var. we can declare multiple var with same name in same scope 
let and var with same name in same scope is also not allowed

For const, it should be declared and initialised together. You cannot assign value to it later 

if no value is assigned to const during declaration, it will give error => "SyntaxError: Missing initializer in const declaration "
If we assign a value "again" to const , it will give error => " TypeError: Assignment to constant variable " 

Reference error: when JS engine tries to find out a specific variable inside the memory space and cannot access it.

If we try to access let variable before declaration, it'll give error:  Reference error: cannot access "a" before initialization => bcoz at this point of time "a" is in the temporal dead zone
If we try to access variable which is not declared anywhere, then we get ReferenceError: "a" is not defined

Types of error:
1. TypeError: eg. const => if we try to assign it the value after initialisation.  const a = 10; a = 20
2. SyntaxError: eg. const => if we do not assign value to const variable during initialisation . As it expects some value during initialisation. const b;    eg. declaring 2/more let/const variables with same name
3. ReferenceError => when js engine tries to find out a specific variable inside the memory space and you cannot access it. Accessing let/const variables before initialisation. Since they are in temporal deadzone.  Or if we try to access variable which is not defined in code.

Which type of variable to use => const > let > var

interview question => let & const are hoisted or not ?  they are in temporal deadzone and explain them the above things


-------------------------------------------------------------------------------------------------------------------------------------
BLOCK SCOPE & Shadowing in JS 🔥| Namaste JavaScript 🙏 Ep. 9

“var” has functional scope.
“let & const” has block scope.
“block” is defined by this curly braces => { }. Block is also known as compound statement.  Block is used to combine multiple js statements into one group. This group of multiple statements can be used in a place where JS expects a single statement. eg. if condition's block. if (true) true OR if(true) {  }. "If" does not have any curly braces in its syntax 
“block scope” means what all variables and functions we can access inside this block.
var defined under the block is attached to global execution context memory. let and const inside the block are attached to block scope memory. They are stored in a separate memory space which is reserved for this block. You cannot access let and const defined in the block outside the block, whereas we can access var defined inside the block outside the block bcoz it is in the global scope.

Shadowing:  if we have same named variable inside and outside the block, then the outside variable will be shadowed inside the bock.
if 2/ multiple var variables of same name are declared in same functional scope, they all point to same memory location.  This is not the case in “let”, since it is block scoped.
If a variable is shadowing something, it should not cross the boundary or the scope.
“var” crosses the boundary of scope whereas “let” does not crosses the boundary of block.

Block scope also follows lexical scope .

var a = 100; let b = 200 { var a = 10; let b = 20; console.log(a); console.log(b) } console.log(a); console.log(b) // output=> 10  20  10  200 .

let a = 10 { var a = 20 } // error // ‘.’ if a variable is shadowing something, it should not cross the boundary. Here inside var “a” is crossing the boundary .’. Syntax error: Identifier "a" has already been declared

let a =10; function () { var a = 20 } //. No error. Since var a won’t cross the function boundary

let a =10 { let a = 10 } // no error
var a = 10 { let a = 20 } // no error ‘.’ “a” inside block won’t cross the block’s boundary.
var a = 10 { var a = 10 } // no error // ‘.’ Both “a” refers to same memory location

scopes of normal functions and arrow functions are exactly same


-------------------------------------------------------------------------------------------------------------------------------------
Closures in JS 🔥 | Namaste JavaScript Episode 10

Closures: It means that a function bind together with its lexical environment/scope .
A function along with its lexical scope forms a closure. Lexical scope’s variable’s reference (not value) is binded and not the value (14:17) . The closure is formed with only those variables which are used in the function. If some variables from the lexical environment are not used, then they won’t be saved for future reference.

A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
In other words, a closure gives you access to an outer function's scope from inner function.
In JS, closures are created every time a function is created, at function creation time.


Interview: What is closures ? Function along with its lexical scope bundled together forms a closure

function x() {
    var a = 7
    function y() {
        console.log(a)
    }
    return y
}

const z = x() // function { console.log(a) }
z() // 7

Uses of closures:
module design pattern,
currying
functions like once
memoize
maintaining state in async world
setTimeouts
Iterators
and many more...



-------------------------------------------------------------------------------------------------------------------------------------
setTimeout + Closures Interview Question 🔥 | Namaste 🙏 JavaScript Ep. 11

in setTimeout, the callback function forms a closure.
in for loop, each time loop runs, a new "let" or "var" variable is created. In case of "let", all variables will have diff reference (since let is block scoped). But in case of "var", all variables will have same reference, since for each "var" with same name, all "var" point to same location


-------------------------------------------------------------------------------------------------------------------------------------
CRAZY JS INTERVIEW 🤯ft. Closures | Namaste 🙏 JavaScript Ep. 12

What is closure in JS is ?
A function along with a reference to its outer environment together forms a closure.
Closure is a combination of a function and its lexical scope bundled together.
Each and every function in JS has access to its outer lexical environment (access to variables and functions which is present in the environment of its parent). Even when this function is executed in some other scope (outside the original scope where it was present), it stills remembers its outer lexical environment where it was originally present in the code.

parameters are also a part of the outer environment.

Example:

function outer(b) {
    var a= 10
    function inner() {
        console.log(a, b)
    }
    return inner
}
outer(2)() // 10, 2
var close = outer(2)
close() // 10, 2


Advantages of closure?
used in module pattern, function currying, higher order functions (like memoize, once), helps in data hiding and encapsulation, 

Data Hiding => suppose we have a variable and we want to like have some data privacy over it, so other functions or other pieces of code cannot have access to that particular data
Example:
function counter() {
    var count = 0 // this variable can't be accessed by anyone outside this function. It is encapsulated.
    return function incrementCounter() {
        count++;
        console.log(count)
    }
}
var counter1 = counter()
counter1() // 1


Disadvantages of closure?
There could be over-consumption of memory in closures bcoz everytime a closure is formed, it consumes a lot of memory & sometimes those variables are not garbage collected.
It accumulates a lot of memory if we create a lot of closures in our program. Bcoz those variables are not garbage collected till the program expires. If not handled properly, it could lead to memory leaks and can freeze the browser.


Garbage Collector?
It is a program in browser / JS engine which frees up the unutilized memory.
In C or C++, it is upto developers how we take memory, have access to the memory, allocate/deallocate memory.  In high level programming language like JS, most of the work is done by JS engine. SO there is a garbage collector in JS.
Whenever there is some unused variables, it kind of like just takes it out of memory. It just frees up the memory whenver it finds out that the variables are no longer needed.


Relation between garbage collector and closures ?
When inner function forms a closure, it has access to its lexical environment. If any variable from lexical environment is used in inner function, its memory wont be freed even if the outer function execution is finished.
But some of the modern browsers JS engine like v8 in chrome => they basically have smart garbage collection mechanism where they somehow finds out that these variables are unreachable and they smartly collect these garbage variables.
Smartly collects => means it will garbage collect the variables from lexical environment if they are not referred in child functions




-------------------------------------------------------------------------------------------------------------------------------------
FIRST CLASS FUNCTIONS 🔥ft. Anonymous Functions | Namaste JavaScript Ep. 13

What is an Anonymous function? A function without a name
You cannot create a function statement without a name.
SO Anonymous functions are used in a place where functions are used as values
var a = function() {
    console.log("Hii")
}

What are first class functions ? also known as first class citizens
Ability of functions to be used as values.
The ability to use functions as values, assign it to a variable, can be passed as an argument to another functions and can be returned from the functions  is known as first class functions. This ability of functions is know as first class functions
We can pass functions inside another functions as an arguments


Difference b/w function statement, function expression, function declaration

Function statement ( function declaration ) :  function a() { console.log(‘hey Vivek’); } => This way of creating a function is called function statement or function declaration
Function expression: var b = function() { console.log(‘Vivek’); } => function acts like a value
the main difference between function statement and expression is hoisting.

named function expression => var b = function x2() { console.log("hiii") } => you cannot directly call x2() => x2 is not defined
named function expression => var b = function x2() { console.log(x2) } => b() => xyz function will be printed

difference between parameters & arguments ?
var b = function(param1, param2) {
    console.log('hey)
}
b(1,2) => 1 and 2 are called arguments => values that you pass isnide the function while calling the function

callback functions
Higher order functions
arrow functions
pure functions


arrow function => come up as a part of ES6 (Ecma Script 2015). let, const, arrow functions are introduced in ES6


-------------------------------------------------------------------------------------------------------------------------------------
Callback Functions in JS ft. Event Listeners 🔥| Namaste JavaScript Ep. 14

Callback function: 
we can take a function and pass it into another function. The function which you pass into another function is called a callback function.
Callback functions gives us access to the whole "asynchronous" world in a "synchronous" "single threaded language".
It can only do one thing at a time and in a specific order. Using callbacks, we can do async things in javascript.

For =>
setTimeout(function(){
    console.log('Heyy')
}, 5000)
For the above code, setTimeout will take this callback function and wil store it in a separate space and it'l attach a timer to it of 5000ms

If you stop the code using debugger, async calls won't be affected. They will continue executing in background. Example => if you have a setTimeout of 5000ms and you put a debugger and stop the other code for 10 seconds, then as soon as you continue the code, the timer was already done with the timer and will execute once all sync calls are done.

Async operations are run in background ( js assigns them to browser to do them ) ( eg. setTimeouts, api calls, etc ) and once async operation is done, it gets queued in the queue to be executed after all sync operations are done. Once sync operations are done, async operation’s callback functions gets executed.
All functions, all callback functions, everything will be executed through single call stack . JS has only one call stack.  So if any operation blocks the call stack, this is called blocking the main thread.
If a function is taking 30-40 seconds to execute and return a value and no async operation is present in that function, then the call stack will be blocked for 30-40 seconds till the execution of that function gets completed.  To avoid this, we can use Web Workers. Web workers are a separate thread apart from JS’s main thread. Web workers are multi-threaded. Web Workers are not part of JavaScript, they are a browser feature which can be accessed through JavaScript.
We should always use async operations for things that will take time.

Event listeners are heavy (they takes memory). They form a closure. Even when the call stack is empty, event listener still remains in memory along with its closure environment. Bcoz anytime a user can click on button and we will need even listeners for that.
So good practise is to remove the event listeners when not needed anymore. Once we remove event listener, all the variables which were held by listeners will be garbage collected



-------------------------------------------------------------------------------------------------------------------------------------
Asynchronous JavaScript & EVENT LOOP from scratch 🔥 | Namaste JavaScript Ep.15

Event Loop:
JS is a synchronous single threaded language. It has 1 call stack and it can only do one thing at a time. This call stack is present inside JS engine. All the code of JS is executed inside this call stack.
Whenever any JS program is run, a Global Execution Context (GEC) is created and is pushed into the call stack. For every function execution, a separate Execution context is created for that particular function and pushed into the same call stack.  Once function execution gets completed, its execution context is posed out of the call stack. And when whole JS program finishes running, GEC is also popped out of the call stack and thus call stack becomes empty
The main job of call stack is to execute what comes inside it. It does not wait for anything. Time, tide and JS waits for none.  What if we want to execute something after 5 seconds?
Execution context has memory and code in it. All code gets run in Code section. Execution context is pushed into the call stack. Call stack is inside the JS engine. And JS engine is inside the browser.  Browser has local storage, session storage, timer, interval, ability of communicating to the external world eg. to go the websites using url. 
Browser has JS Engine -> JS Engine has call stack in it -> Our program runs in call stack.
JS engine needs some ways to use the features of browser. Web APIs are used to use those features of browsers. Some of the web apis are : setTimeout(), DOM APIs document.getElemenById … , fetch(), localStorage, console, location, etc.  These all Web APIs are not a part of JS. You can access them directly or using “window” object (global object). eg. setTimeout() , window.setTimeout() , console.log(‘hey’) , window.console.log(‘hey’) . Broswers gives us access inside this call stack of JS engine . And since window object is present at global scope, we can access the web apis directly without the “window” keyword.
event listener: it is asynchronous.  document.getElementbyId(“btn”).addEventListener(“click”, function callbackFn() { console.log(‘it is a callback function’) } ).  We need to destroy the event listeners, or else they will just be listening to event even if program gets executed and they use the memory space.

console is synchronous. setTimeout is asynchronous.
how setTimeout() works? setTimeout is the web Api of browser which can be used to access the timer feature of the browser.  setTimeout takes a callback function and delay as an argument. When a callback function is passed in the setTimeout, it basically registers a callback in the Web API’s environment and along with that it starts the timer for required delay.
If code execution gets finished and even if setTimeout still hasn’t finished with the timer, the GEC gets poped out.  As soon as timer expires, callback function needs to go into the call stack to execute. But instead, callback function is pushed into the “Callback Queue”. The Job of Event Loop is to check this Callback Queue and push the callbacks from this callback queue into the call stack. Event Loop acts like a GateKeeper and checks whether we have something in the Callback Queue and if it has something, event loop pushes that into the call stack if and only if the call stack is empty . and as soon as this function gets executed, an execution context is created for this function in the call stack.

Event loop’s only Job is to continuously monitor the call stack as well as the callback Queue. If the call stack is empty, and if event loops sees that there is a function in Callback Queue, it takes the function and pushes it into the call stack.

fetch(): returns a promise and we need to pass a callback function to it which will be executed once promise is resolved.

Micro task queue: it is similar to callback queue, but micro task queue has higher priority. All the functions in the mircrotask queue will be executed first and then the functions in callback queue will be executed. 1. All the callback functions which come through promises, 2. Mutation observer  will go inside this micro tasks queue.  eg. fetch(), api calls, promises,

Callback queue ( task queue ): other callback functions that come from setTimeout, Dom apis event listeners like addEventListener goes inside this queue. 

mutation observer: it keeps on checking whether there is some mutation in the Dom tree. If there is mutation on Dom tree, it can execute some callback function.

synchronous code > micro tasks queue > macro tasks queue (callback queue) (task queue) (event queue)

Micro tasks:  eg. mutation observer callbacks as well as promise callbacks
Macro tasks: eg. setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI Rendering
https://www.geeksforgeeks.org/what-are-the-microtask-and-macrotask-within-an-event-loop-in-javascript/
https://stackoverflow.com/a/60210808/7307315

At a time, only 1 callback function’s execution context is present in the call stack because event loop takes the callback function and pushes to callstack only when the call stack is empty. 

Functions from “Micro Task Queue” gets executed only when “call stack” is empty. And functions from “Callback Queue” starts getting executed only when “Microtask Queue” is empty.

